<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Paul&#39;s blog</title>
    <link>https://blog.paulhankin.net/categories/programming/</link>
    <description>Recent content in Programming on Paul&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.paulhankin.net/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Generating random Latin squares</title>
      <link>https://blog.paulhankin.net/latinsquares/</link>
      <pubDate>Fri, 14 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.paulhankin.net/latinsquares/</guid>
      <description>&lt;p&gt;Generation of random Latin Squares (such that each latin square of a given size is equally
likely) is a deceptively difficult problem.&lt;/p&gt;

&lt;p&gt;This post describes my own implementation, loosely based on the &lt;a href=&#34;https://www.researchgate.net/publication/308517970_Generation_of_Random_Latin_Squares_Step_By_Step_and_Graphically&#34;&gt;Java implementation described by Ignacio Gallego Sagastume&lt;/a&gt; which
implements the rather ingenious method of &lt;a href=&#34;https://onlinelibrary.wiley.com/doi/abs/10.1002/%28SICI%291520-6610%281996%294%3A6%3C405%3A%3AAID-JCD3%3E3.0.CO%3B2-J&#34;&gt;Jacobson and Matthews&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A gentle introduction to hard programming</title>
      <link>https://blog.paulhankin.net/learnprogramming/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.paulhankin.net/learnprogramming/</guid>
      <description>&lt;p&gt;As I was growing up in England in the 80s, there was a boom in
home microcomputers, with the Commodore 64, the ZX Spectrum,
and the BBC Micro being three popular choices. These
provided an excellent and approachable introduction to programming,
with many of my friends learning programming in BASIC and assembler.
We taught ourselves the fundamentals of computing while we were playing,
and at a relatively early age.&lt;/p&gt;

&lt;p&gt;These days the computing environment is complex, and it&#39;s much harder for a
beginner to get started, or even know how to get started. Mostly
programming is learnt at university or in other formal education.
While there is definitely more to learn now than before, it seems like
the fundamentals of coding should still be easier to pick up than
it currently is.&lt;/p&gt;

&lt;p&gt;This post takes a look at what made home micros effective
learning environments, and considers what a modern equivalent might look
like.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Little Man Computer</title>
      <link>https://blog.paulhankin.net/littlemancomputer/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.paulhankin.net/littlemancomputer/</guid>
      <description>&lt;p&gt;I had never seen this mini-assembler-based educational computer before. &lt;a href=&#34;https://en.wikipedia.org/wiki/Little_man_computer&#34;&gt;wikipedia.org/Little_man_computer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I couldn&#39;t find a good online emulator, so I wrote one: &lt;a href=&#34;https://blog.paulhankin.net/lmc/lmc.html&#34;&gt;Little Man Computer Emulator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enter the program on the left, click &amp;quot;Assemble&amp;quot;, enter some inputs if your program needs them, and then step
through the execution.&lt;/p&gt;

&lt;p&gt;It&#39;s probably got some bugs since it was a quick hack, but it worked on the examples I tried it on.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>