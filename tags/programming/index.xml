<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on Paul&#39;s blog</title>
    <link>https://blog.paulhankin.net/tags/programming/</link>
    <description>Recent content in programming on Paul&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Feb 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.paulhankin.net/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Back to C</title>
      <link>https://blog.paulhankin.net/back-to-c/</link>
      <pubDate>Fri, 07 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.paulhankin.net/back-to-c/</guid>
      <description>&lt;p&gt;I&#39;ve recently been programming seriously in C, after around 10 years in higher
level languages (Go, Python, C++, and others). I&#39;ve been using C11, the
latest standard, whereas previously I was working in C89.&lt;/p&gt;

&lt;p&gt;I &lt;em&gt;like&lt;/em&gt; programming in C. It&#39;s not an easy language to write fluently because
it doens&#39;t provide many conveniences, it&#39;s full of traps, and I&#39;d avoid it if I
was writing something that needed to be safe, but I still find it fun.&lt;/p&gt;

&lt;p&gt;This post describes my recent experience with C and the new standard, and my
observations about how things have and haven&#39;t changed. It&#39;s not a critique of C,
and some of the obvious problems with writing C (such as lack of bounds checking
of arrays) aren&#39;t discussed.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A suspiciously fast program</title>
      <link>https://blog.paulhankin.net/powercheat/</link>
      <pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.paulhankin.net/powercheat/</guid>
      <description>&lt;p&gt;Computing large integer powers modulo some number is a somewhat common operation. For example, it&#39;s used in RSA encryption. Usually, this is done using exponentiation by squaring, but this go program correctly prints the results of &lt;span  class=&#34;math&#34;&gt;\(n^{2^{64}}\ (\mathrm{mod}\ 115763)\)&lt;/span&gt; for &lt;span  class=&#34;math&#34;&gt;\(n\)&lt;/span&gt; from 1 to 20, seemingly naively:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;^&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; = (&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;115763&lt;/span&gt;
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pow(%d, pow(2, 64)) mod 115763 = %d\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;)
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It runs, unoptimized, in a few milliseconds on my desktop.
You can run it yourself online using the &lt;a href=&#34;https://play.golang.org/p/y2L63tDfUMJ&#34;&gt;go playground&lt;/a&gt;. Feel free to edit the code a little before running it to convince yourself it&#39;s not just fast because the playground is caching the results or something.&lt;/p&gt;

&lt;p&gt;How can it be that fast? Is go&#39;s optimizing compiler that clever? It&#39;s not, and there&#39;s a trick in the code. Can you see it?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Generating random Latin squares</title>
      <link>https://blog.paulhankin.net/latinsquares/</link>
      <pubDate>Fri, 14 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.paulhankin.net/latinsquares/</guid>
      <description>&lt;p&gt;Generation of random Latin Squares (such that each latin square of a given size is equally
likely) is a deceptively difficult problem.&lt;/p&gt;

&lt;p&gt;This post describes my own implementation, loosely based on the &lt;a href=&#34;https://www.researhcgate.net/publication/308517970_Generation_of_Random_Latin_Squares_Step_By_Step_and_Graphically&#34;&gt;Java implementation described by Ignacio Gallego Sagastume&lt;/a&gt; which
implements the rather ingenious method of &lt;a href=&#34;https://onlinelibrary.wiley.com/doi/abs/10.1002/%28SICI%291520-6610%281996%294%3A6%3C405%3A%3AAID-JCD3%3E3.0.CO%3B2-J&#34;&gt;Jacobson and Matthews&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A gentle introduction to hard programming</title>
      <link>https://blog.paulhankin.net/learnprogramming/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.paulhankin.net/learnprogramming/</guid>
      <description>&lt;p&gt;As I was growing up in England in the 80s, there was a boom in
home microcomputers, with the Commodore 64, the ZX Spectrum,
and the BBC Micro being three popular choices. These
provided an excellent and approachable introduction to programming,
with many of my friends learning programming in BASIC and assembler.
We taught ourselves the fundamentals of computing while we were playing,
and at a relatively early age.&lt;/p&gt;

&lt;p&gt;These days the computing environment is complex, and it&#39;s much harder for a
beginner to get started, or even know how to get started. Mostly
programming is learnt at university or in other formal education.
While there is definitely more to learn now than before, it seems like
the fundamentals of coding should still be easier to pick up than
it currently is.&lt;/p&gt;

&lt;p&gt;This post takes a look at what made home micros effective
learning environments, and considers what a modern equivalent might look
like.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>