<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mathematics on Paul&#39;s blog</title>
    <link>https://blog.paulhankin.net/tags/mathematics/</link>
    <description>Recent content in Mathematics on Paul&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 16 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.paulhankin.net/tags/mathematics/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A suspiciously fast program</title>
      <link>https://blog.paulhankin.net/powercheat/</link>
      <pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.paulhankin.net/powercheat/</guid>
      <description>&lt;p&gt;Computing large integer powers modulo some number is a somewhat common operation. For example, it&#39;s used in RSA encryption. Usually, this is done using exponentiation by squaring, but this go program correctly prints the results of &lt;span  class=&#34;math&#34;&gt;\(n^{2^{64}}\ (\mathrm{mod}\ 115763)\)&lt;/span&gt; for &lt;span  class=&#34;math&#34;&gt;\(n\)&lt;/span&gt; from 1 to 20, seemingly naively:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	for n := 1; n &amp;lt;= 20; n++ {
		result := 1
		for i := 0; i &amp;lt; 2^64; i++ {
			result = (result * n) % 115763
		}
		fmt.Printf(&amp;quot;pow(%d, pow(2, 64)) mod 115763 = %d\n&amp;quot;, n, result)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It runs, unoptimized, in a few milliseconds on my desktop.
You can run it yourself online using the &lt;a href=&#34;https://play.golang.org/p/y2L63tDfUMJ&#34;&gt;go playground&lt;/a&gt;. Feel free to edit the code a little before running it to convince yourself it&#39;s not just fast because the playground is caching the results or something.&lt;/p&gt;

&lt;p&gt;How can it be that fast? Is go&#39;s optimizing compiler that clever? It&#39;s not, and there&#39;s a trick in the code. Can you see it?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Generating random Latin squares</title>
      <link>https://blog.paulhankin.net/latinsquares/</link>
      <pubDate>Fri, 14 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.paulhankin.net/latinsquares/</guid>
      <description>&lt;p&gt;Generation of random Latin Squares (such that each latin square of a given size is equally
likely) is a deceptively difficult problem.&lt;/p&gt;

&lt;p&gt;This post describes my own implementation, loosely based on the &lt;a href=&#34;https://www.researchgate.net/publication/308517970_Generation_of_Random_Latin_Squares_Step_By_Step_and_Graphically&#34;&gt;Java implementation described by Ignacio Gallego Sagastume&lt;/a&gt; which
implements the rather ingenious method of &lt;a href=&#34;https://onlinelibrary.wiley.com/doi/abs/10.1002/%28SICI%291520-6610%281996%294%3A6%3C405%3A%3AAID-JCD3%3E3.0.CO%3B2-J&#34;&gt;Jacobson and Matthews&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Near-optimal closed-hand Chinese Poker.</title>
      <link>https://blog.paulhankin.net/chinesepoker/</link>
      <pubDate>Thu, 21 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.paulhankin.net/chinesepoker/</guid>
      <description>&lt;p&gt;This blog post looks at closed-hand Chinese Poker, and describes
a near-optimal strategy for it which is readily implementable
on a computer.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>